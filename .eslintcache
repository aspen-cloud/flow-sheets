[{"/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/index.js":"1","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/App.js":"2","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/flow-graph.tsx":"3","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/test-data.js":"4","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/index.tsx":"5","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/datasource-node.tsx":"6","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/constant-node.tsx":"7","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/avg-column-node.tsx":"8","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/single-cell-node.tsx":"9","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/primitives/index.tsx":"10","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/column-generator-node/index.tsx":"11","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/table-node/index.tsx":"12","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/filter-node/index.tsx":"13","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/base-node.tsx":"14","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/filter-node/filters.ts":"15","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/filter-node/filter-form.tsx":"16","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/primitives/code.ts":"17","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/primitives/date.ts":"18","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/primitives/table.ts":"19","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/table-node/data-table.tsx":"20","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/column-generator-node/column-generator-form.tsx":"21","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/primitives/formula.ts":"22","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/primitives/string.ts":"23","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/primitives/number.ts":"24"},{"size":228,"mtime":1624195595584,"results":"25","hashOfConfig":"26"},{"size":401,"mtime":1624195595580,"results":"27","hashOfConfig":"26"},{"size":14507,"mtime":1624201000537,"results":"28","hashOfConfig":"26"},{"size":312,"mtime":1624195595584,"results":"29","hashOfConfig":"26"},{"size":535,"mtime":1624195595581,"results":"30","hashOfConfig":"26"},{"size":1647,"mtime":1624199459928,"results":"31","hashOfConfig":"26"},{"size":1091,"mtime":1624199845936,"results":"32","hashOfConfig":"26"},{"size":2033,"mtime":1624199743758,"results":"33","hashOfConfig":"26"},{"size":1083,"mtime":1624199970514,"results":"34","hashOfConfig":"26"},{"size":2063,"mtime":1624199572959,"results":"35","hashOfConfig":"26"},{"size":2263,"mtime":1624199822090,"results":"36","hashOfConfig":"26"},{"size":1085,"mtime":1624195732919,"results":"37","hashOfConfig":"26"},{"size":2436,"mtime":1624199894588,"results":"38","hashOfConfig":"26"},{"size":2012,"mtime":1624199438542,"results":"39","hashOfConfig":"26"},{"size":290,"mtime":1624195595583,"results":"40","hashOfConfig":"26"},{"size":1335,"mtime":1624195595583,"results":"41","hashOfConfig":"26"},{"size":304,"mtime":1624201034677,"results":"42","hashOfConfig":"26"},{"size":573,"mtime":1624195595581,"results":"43","hashOfConfig":"26"},{"size":840,"mtime":1624195732918,"results":"44","hashOfConfig":"26"},{"size":1917,"mtime":1624195595584,"results":"45","hashOfConfig":"26"},{"size":984,"mtime":1624195595582,"results":"46","hashOfConfig":"26"},{"size":583,"mtime":1624195595581,"results":"47","hashOfConfig":"26"},{"size":885,"mtime":1624195595582,"results":"48","hashOfConfig":"26"},{"size":844,"mtime":1624195595582,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"ogq6qz",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"63"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"63"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"63"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"63"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"63"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"63"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/index.js",[],["110","111"],"/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/App.js",[],"/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/flow-graph.tsx",["112","113","114","115","116"],"import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useRef,\n  DragEventHandler,\n} from \"react\";\nimport XLSX from \"xlsx\";\nimport { nanoid } from \"nanoid\";\n\nimport ReactFlow, {\n  removeElements,\n  addEdge,\n  updateEdge,\n  getConnectedEdges,\n  Controls,\n  Background,\n  isEdge,\n  Elements,\n  FlowElement,\n  OnEdgeUpdateFunc,\n  Connection,\n  Node,\n  Edge,\n  BackgroundVariant,\n  PanOnScrollMode,\n  Position,\n  XYPosition,\n  OnLoadFunc,\n  OnLoadParams,\n} from \"react-flow-renderer\";\nimport * as AllNodes from \"./graph-nodes/index\";\n\nimport testData from \"./test-data\";\nimport { ItemPredicate, ItemRenderer, Omnibar } from \"@blueprintjs/select\";\nimport {\n  HotkeysTarget2,\n  MenuItem,\n  ContextMenu,\n  Menu,\n  Icon,\n  Drawer,\n  DrawerSize,\n  Classes,\n  Collapse,\n  Card,\n} from \"@blueprintjs/core\";\n\nconst onElementClick = (event: React.MouseEvent, element: Node | Edge) => {};\n\nconst initBgColor = \"#343434\";\n\nconst connectionLineStyle = { stroke: \"#fff\" };\nconst snapGrid: [number, number] = [20, 20];\n\nfunction flattenNodes(nodes: Record<string, any>): [string, any][] {\n  return Object.entries(nodes).flatMap(([key, val]) =>\n    val.Component ? [[key, val]] : flattenNodes(val),\n  );\n}\n\nconst GraphNodes = Object.fromEntries(flattenNodes(AllNodes));\nconsole.log(AllNodes, GraphNodes);\n\nconst nodeTypes = Object.fromEntries(\n  Object.entries(GraphNodes).map(([key, val]) => [key, val.Component]),\n);\n\nconst columns = [\n  {\n    Header: \"Address\",\n    accessor: \"address\",\n  },\n  {\n    Header: \"Price\",\n    accessor: \"price\",\n  },\n  {\n    Header: \"Size (SqrFt)\",\n    accessor: \"sqrft\",\n  },\n];\n\nfunction createReactFlowNode({\n  type,\n  data,\n  position,\n}: {\n  type: string;\n  data?: any;\n  position: { x: number; y: number };\n}) {\n  return {\n    id: nanoid(),\n    type,\n    data: GraphNodes[type].initializeStreams({ initialData: data }),\n    position,\n    style: { padding: \"10px\", border: \"1px solid white\", borderRadius: \"10px\" },\n  };\n}\n\nconst nodes = [\n  createReactFlowNode({\n    type: \"DataSource\",\n    data: {\n      data: {\n        rows: testData,\n        columns,\n      },\n      label: \"TestData\",\n    },\n    position: { x: 100, y: -200 },\n  }),\n  createReactFlowNode({\n    type: \"Table\",\n    position: { x: 100, y: -100 },\n  }),\n  createReactFlowNode({\n    type: \"ColumnGenerator\",\n    position: { x: 0, y: 0 },\n  }),\n  createReactFlowNode({\n    type: \"Table\",\n    position: { x: 0, y: 300 },\n  }),\n  createReactFlowNode({\n    type: \"AvgColumn\",\n    position: { x: 110, y: -150 },\n  }),\n  createReactFlowNode({\n    type: \"SingleCell\",\n    position: { x: 130, y: -130 },\n  }),\n];\n\nconst ElementInfoMenuItem = ({ element }: { element: FlowElement }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <>\n      <div onClick={() => setIsOpen((wasOpen) => !wasOpen)}>\n        <b>\n          <Icon icon={isOpen ? \"caret-down\" : \"caret-right\"} /> {element.id}\n        </b>\n      </div>\n      <Collapse isOpen={isOpen}>\n        <Card>\n          <div>\n            <b>Type:</b> {element.type}\n          </div>\n        </Card>\n      </Collapse>\n    </>\n  );\n};\n\nconst FlowGraph = () => {\n  const [reactflowInstance, setReactflowInstance] =\n    useState<OnLoadParams | null>(null);\n  const [elements, setElements] = useState<Elements>(nodes);\n  const [bgColor, setBgColor] = useState(initBgColor);\n  const [sideMenuOpen, setSideMenuOpen] = useState(false);\n  const [selectedElements, setSelectedElements] = useState<Elements>([]);\n\n  // useEffect(() => {\n  //   if (reactflowInstance && elements.length > 0) {\n  //     //reactflowInstance.fitView();\n  //   }\n  // }, [reactflowInstance, elements.length]);\n\n  const validateConnection = (\n    connection: Connection | Edge<any>,\n    els: Elements,\n  ) => {\n    /**\n     * There are hooks on initial connection to a handle to check if the connection is valid\n     * - https://reactflow.dev/docs/api/handle/\n     * Unfortunately, this is not available on an edge update\n     * - https://github.com/wbkd/react-flow/issues/1034\n     *\n     * Manually enforcing that on connections/updates that no other incoming edges exist for that handle\n     * That may not always be the case, but for now that seems correct\n     */\n\n    const target = els.find(({ id }) => id === connection.target) as Node<any>;\n    if (!target) return false;\n    const edges = els.filter((el) => isEdge(el)) as Edge<any>[];\n    const handleEdges = getConnectedEdges([target], edges).filter(\n      (edge) =>\n        edge.target === target.id &&\n        edge.targetHandle === connection.targetHandle,\n    );\n\n    if (handleEdges.length >= 1) {\n      console.log(\"INVALID: ALREADY AN EDGE ON THIS HANDLE\");\n      return false;\n    }\n\n    return true;\n  };\n\n  const getEdgeStreams = (edge: Connection | Edge<any>, els: Elements) => {\n    const sourceNode = els.find(({ id }) => id === edge.source);\n    const targetNode = els.find(({ id }) => id === edge.target);\n    const sourceOutput = sourceNode!.data.sinks[edge.sourceHandle!];\n    const targetInput = targetNode!.data.sources[edge.targetHandle!];\n\n    return [sourceOutput, targetInput];\n  };\n\n  const onEdgeConnect = (edge: Connection | Edge<any>, els: Elements) => {\n    const [sourceOutput, targetInput] = getEdgeStreams(edge, els);\n    sourceOutput.subscribe((latestVal: any) => {\n      targetInput.next(latestVal);\n    });\n  };\n\n  const onEdgeDisconnect = (edge: Connection | Edge<any>, els: Elements) => {\n    const [sourceOutput, targetInput] = getEdgeStreams(edge, els);\n    // TODO fix for RXJS\n  };\n\n  const onConnect = (connection: Connection | Edge<any>) => {\n    setElements((els) => {\n      if (!validateConnection(connection, els)) return els;\n      onEdgeConnect(connection, els);\n      return addEdge(\n        { ...connection, animated: true, style: { stroke: \"#fff\" } },\n        els,\n      );\n    });\n  };\n\n  const onElementsRemove = (elementsToRemove: Elements) => {\n    setElements((els) => {\n      for (const el of elementsToRemove) {\n        if (isEdge(el)) {\n          onEdgeDisconnect(el, els);\n        }\n      }\n      return removeElements(elementsToRemove, els);\n    });\n  };\n\n  const onEdgeUpdate: OnEdgeUpdateFunc<any> = (oldEdge, newConnection) => {\n    setElements((els) => {\n      if (!validateConnection(newConnection, els)) return els;\n      onEdgeDisconnect(oldEdge, els);\n      onEdgeConnect(newConnection, els);\n      return updateEdge(oldEdge, newConnection, els);\n    });\n  };\n\n  const addNode = useCallback(({ type, position }) => {\n    const newNode = createReactFlowNode({ type, position });\n    setElements((prevElems) => [...prevElems, newNode]);\n  }, []);\n\n  const onLoad: OnLoadFunc<any> = useCallback(\n    (rfi) => {\n      if (!reactflowInstance) {\n        setReactflowInstance(rfi);\n        newFunction()(\"flow loaded:\", rfi);\n      }\n    },\n    [reactflowInstance],\n  );\n\n  function parseFileData(file: File, callback: (data: any) => void) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const data = new Uint8Array(e.target!.result as ArrayBuffer);\n      const workbook = XLSX.read(data, { type: \"array\" });\n      const json_data = XLSX.utils.sheet_to_json(\n        workbook.Sheets[Object.keys(workbook.Sheets)[0]], // todo: Possibly load all \"Sheets\" as separate data sources?\n        { raw: false },\n      );\n      callback(json_data);\n    };\n    reader.readAsArrayBuffer(file);\n  }\n\n  function addDataNode(data: any[], label: string, position: XYPosition) {\n    const cols = Object.keys(data.length ? data[0] : {}).map((col) => ({\n      Header: col,\n      accessor: col,\n    }));\n\n    const newEl = createReactFlowNode({\n      type: \"DataSource\",\n      data: {\n        data: {\n          rows: data,\n          columns: cols,\n        },\n        label,\n      },\n      position,\n    });\n\n    setElements((els) => [...els, newEl]);\n  }\n\n  const reactFlowWrapper = useRef<HTMLDivElement>(null);\n\n  const onDragOver: DragEventHandler<HTMLDivElement> = (event) => {\n    event.preventDefault();\n    event.dataTransfer!.dropEffect = \"move\";\n  };\n\n  const onDrop: React.DragEventHandler<HTMLDivElement> = (event) => {\n    event.preventDefault();\n    if (reactFlowWrapper.current == null || reactflowInstance == null) return;\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    // const type = event.dataTransfer.getData(\"application/reactflow\");\n    const position = reactflowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top,\n    });\n    const file = event.dataTransfer.files[0];\n    parseFileData(file, (json_data) => {\n      addDataNode(json_data, file.name, position);\n    });\n  };\n\n  const NodeOmnibar = Omnibar.ofType<[string, string]>();\n\n  const [showNodeOmniBar, setShowNodeOmniBar] = useState(false);\n\n  const renderNodeType: ItemRenderer<[string, any]> = (\n    [key, component],\n    { handleClick, modifiers, query },\n  ) => {\n    if (!modifiers.matchesPredicate) {\n      return null;\n    }\n    return (\n      <MenuItem\n        active={modifiers.active}\n        disabled={modifiers.disabled}\n        label={key}\n        key={key}\n        onClick={handleClick}\n        text={key}\n      />\n    );\n  };\n\n  const filterNodeTypes: ItemPredicate<[string, any]> = (\n    query,\n    [key, component],\n    _index,\n    exactMatch,\n  ) => {\n    const normalizedTitle = key.toLowerCase();\n    const normalizedQuery = query.toLowerCase();\n    if (!query || query.length === 0) return true;\n    if (exactMatch) {\n      return normalizedTitle === normalizedQuery;\n    } else {\n      return normalizedTitle.indexOf(normalizedQuery) >= 0;\n    }\n  };\n\n  return (\n    <div ref={reactFlowWrapper} style={{ width: \"100%\", height: \"100%\" }}>\n      <ReactFlow\n        elements={elements}\n        panOnScroll={true}\n        panOnScrollMode={PanOnScrollMode.Free}\n        onElementClick={onElementClick}\n        onElementsRemove={onElementsRemove}\n        onConnect={onConnect}\n        style={{ background: bgColor }}\n        onDoubleClick={() => {\n          console.log(\"double clicked...\");\n        }}\n        onLoad={onLoad}\n        nodeTypes={nodeTypes}\n        connectionLineStyle={connectionLineStyle}\n        snapToGrid={true}\n        snapGrid={snapGrid}\n        defaultZoom={1}\n        onDrop={onDrop}\n        onDragOver={onDragOver}\n        onEdgeUpdate={onEdgeUpdate}\n        onSelectionChange={(elements) => {\n          setSelectedElements(elements || []);\n        }}\n        onNodeContextMenu={(event, node) => {\n          event.preventDefault();\n          const menu = React.createElement(\n            Menu,\n            {},\n            React.createElement(MenuItem, {\n              onClick: () => onElementsRemove([node]),\n              text: \"Delete node\",\n            }),\n          );\n          ContextMenu.show(menu, { left: event.clientX, top: event.clientY });\n        }}\n        onEdgeContextMenu={(event, edge) => {\n          event.preventDefault();\n          const menu = React.createElement(\n            Menu,\n            {},\n            React.createElement(MenuItem, {\n              onClick: () => onElementsRemove([edge]),\n              text: \"Delete edge\",\n            }),\n          );\n          ContextMenu.show(menu, { left: event.clientX, top: event.clientY });\n        }}\n        onSelectionContextMenu={(event, nodes) => {\n          event.preventDefault();\n          const menu = React.createElement(\n            Menu,\n            {},\n            React.createElement(MenuItem, {\n              onClick: () => onElementsRemove(nodes),\n              text: \"Delete nodes\",\n            }),\n          );\n          ContextMenu.show(menu, { left: event.clientX, top: event.clientY });\n        }}\n        onPaneContextMenu={(event) => {\n          event.preventDefault();\n          const menu = React.createElement(\n            Menu,\n            {},\n            React.createElement(MenuItem, {\n              onClick: () => reactflowInstance?.fitView(),\n              text: \"Zoom to fit\",\n            }),\n          );\n          ContextMenu.show(menu, { left: event.clientX, top: event.clientY });\n        }}\n        edgeUpdaterRadius={35}\n      >\n        <Background variant={BackgroundVariant.Dots} gap={12} size={1} />\n        <Controls />\n        {!sideMenuOpen ? (\n          <div\n            style={{\n              position: \"absolute\",\n              top: \"10px\",\n              right: \"10px\",\n              background: \"white\",\n              borderRadius: \"100%\",\n              zIndex: 1000,\n            }}\n            onClick={() => setSideMenuOpen(true)}\n          >\n            <Icon icon=\"double-chevron-left\" iconSize={20} />\n          </div>\n        ) : (\n          \"\"\n        )}\n\n        <Drawer\n          icon=\"multi-select\"\n          onClose={() => setSideMenuOpen(false)}\n          title=\"Selected Elements\"\n          isOpen={sideMenuOpen}\n          size={DrawerSize.SMALL}\n          hasBackdrop={false}\n          canOutsideClickClose={false}\n          canEscapeKeyClose={false}\n          enforceFocus={false}\n          portalClassName=\"info-sidebar\"\n        >\n          <div className={Classes.DRAWER_BODY}>\n            <div className={Classes.DIALOG_BODY}>\n              {selectedElements.length ? (\n                selectedElements.map((el, i) => (\n                  <ElementInfoMenuItem key={i} element={el} />\n                ))\n              ) : (\n                <div>No elements selected.</div>\n              )}\n            </div>\n          </div>\n        </Drawer>\n      </ReactFlow>\n      <HotkeysTarget2\n        hotkeys={[\n          {\n            combo: \"n\",\n            global: true,\n            label: \"Show Omnibar\",\n            onKeyDown: () => {\n              console.log(\"hot key pressed\");\n              setShowNodeOmniBar(true);\n            },\n            // prevent typing \"O\" in omnibar input\n            preventDefault: true,\n          },\n        ]}\n      >\n        <NodeOmnibar\n          noResults={<MenuItem disabled={true} text=\"No results.\" />}\n          items={Object.entries(nodeTypes) as [string, string][]}\n          itemRenderer={renderNodeType}\n          itemPredicate={filterNodeTypes}\n          onItemSelect={([type]) => {\n            addNode({ type, position: { x: 0, y: 0 } });\n            setShowNodeOmniBar(false);\n          }}\n          onClose={() => {\n            setShowNodeOmniBar(false);\n          }}\n          isOpen={showNodeOmniBar}\n          resetOnSelect={true}\n        />\n      </HotkeysTarget2>\n    </div>\n  );\n};\n\nexport default FlowGraph;\nfunction newFunction() {\n  return console.log;\n}\n","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/test-data.js",["117"],"export default [\n  {\n    address: \"1234 Maple Ln\",\n    price: 240000,\n    sqrft: 2200\n  },\n  {\n    address: \"41 9th Ave\",\n    price: 740000,\n    sqrft: 2100\n  },\n  {\n    address: \"72 Howard St\",\n    price: 560000,\n    sqrft: 2300\n  },\n  {\n    address: \"42 Wallaby Way\",\n    price: 450000,\n    sqrft: 2600\n  }\n];\n","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/index.tsx",[],["118","119"],"/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/datasource-node.tsx",["120","121"],"import React, { useEffect, useState } from \"react\";\nimport { Handle, Position } from \"react-flow-renderer\";\nimport BaseNode from \"../../base-node\";\nimport { GraphNode, Table } from \"../../types\";\nimport { BehaviorSubject } from \"rxjs\";\n\ninterface DatasourceNodeIO {\n  sources: {\n    label: BehaviorSubject<string>;\n  };\n  sinks: {\n    output: BehaviorSubject<Table<any>>;\n  };\n}\n\nconst DataSourceNode: GraphNode<DatasourceNodeIO> = {\n  initializeStreams: function ({ initialData }): DatasourceNodeIO {\n    console.log(\"initializing datasource with\", initialData);\n    return {\n      sources: {\n        label: new BehaviorSubject(initialData.label), // constant(initialData.label)\n      },\n      sinks: {\n        output: new BehaviorSubject(initialData.data), // constant(initialData.data)\n      },\n    };\n  },\n\n  Component: function ({\n    data: { sources, sinks },\n  }: {\n    data: DatasourceNodeIO;\n  }) {\n    const [label, setLabel] = useState(\"\");\n    useEffect(() => {\n      const { unsubscribe } = sources.label.subscribe(setLabel);\n      return unsubscribe;\n    }, []);\n    return (\n      <BaseNode sources={sources} sinks={sinks}>\n        <figure style={{ textAlign: \"center\" }}>\n          <img\n            style={{\n              userSelect: \"none\",\n              pointerEvents: \"none\",\n            }}\n            width=\"50px\"\n            src=\"/database.svg\"\n          />\n          <figcaption style={{ backgroundColor: \"#dedede\", padding: \"0 1em\" }}>\n            {label}\n          </figcaption>\n        </figure>\n        <Handle position={Position.Bottom} type=\"source\" />\n      </BaseNode>\n    );\n  },\n};\n\nexport default DataSourceNode;\n","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/constant-node.tsx",["122","123"],"import React, { useEffect, useState } from \"react\";\nimport { GraphNode, Table } from \"../../../types\";\nimport BaseNode from \"../../../base-node\";\nimport { BehaviorSubject } from \"rxjs\";\n\ninterface ConstantNodeIO {\n  sources: {\n    value: BehaviorSubject<any>;\n  };\n  sinks: {\n    output: BehaviorSubject<any>;\n  };\n}\n\nconst ConstantNode: GraphNode<ConstantNodeIO> = {\n  initializeStreams: function ({ initialData }): ConstantNodeIO {\n    const value = new BehaviorSubject(\"\");\n    return {\n      sources: {\n        value,\n      },\n      sinks: {\n        output: value,\n      },\n    };\n  },\n\n  Component: function ({ data }: { data: ConstantNodeIO }) {\n    const [value, setValue] = useState(\"Single Value\");\n    useEffect(() => {\n      const { unsubscribe } = data.sources.value.subscribe(setValue);\n      return unsubscribe;\n    }, []);\n    return (\n      <BaseNode sources={data.sources} sinks={data.sinks}>\n        <input\n          value={value}\n          onChange={(e) => data.sources.value.next(e.target.value)}\n        />\n      </BaseNode>\n    );\n  },\n};\n\nexport default ConstantNode;\n","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/avg-column-node.tsx",["124"],"import React, { useEffect, useState } from \"react\";\nimport { Column, GraphNode, Table } from \"../../../types\";\nimport BaseNode from \"../../../base-node\";\nimport { BehaviorSubject, combineLatest } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\ninterface AvgColumnNodeIO {\n  sources: {\n    table: BehaviorSubject<Table<any>>;\n    selectedColumn: BehaviorSubject<string>;\n  };\n  sinks: {\n    output: BehaviorSubject<number>;\n  };\n}\n\nconst AvgColumnNode: GraphNode<AvgColumnNodeIO> = {\n  initializeStreams: function () {\n    const table = new BehaviorSubject({ columns: [], rows: [] } as Table<any>);\n    const selectedColumn = new BehaviorSubject(\"\");\n    return {\n      sources: {\n        table,\n        selectedColumn,\n      },\n      sinks: {\n        output: combineLatest(table, selectedColumn).pipe(\n          map(([table, selectedColumn]) => {\n            console.log(table, selectedColumn);\n            const sum: number = table.rows.reduce(\n              (sum, row) => sum + row[selectedColumn],\n              0,\n            );\n            const avg = sum / table.rows.length;\n\n            return avg;\n          }),\n        ) as BehaviorSubject<number>,\n      },\n    };\n  },\n  Component: function ({ data }) {\n    const [columns, setColumns] = useState<Column[]>([]);\n\n    useEffect(() => {\n      const { unsubscribe } = data.sources.table.subscribe(({ columns }) =>\n        setColumns(columns),\n      );\n      return unsubscribe;\n    }, []);\n\n    return (\n      <BaseNode sources={data.sources} sinks={data.sinks}>\n        <div style={{ backgroundColor: \"white\" }}>\n          <div>Average a column</div>\n          <select\n            onChange={(e) => {\n              data.sources.selectedColumn.next(e.target.value);\n            }}\n          >\n            {columns.map((column) => (\n              <option key={column.accessor} value={column.accessor}>\n                {column.Header}\n              </option>\n            ))}\n          </select>\n        </div>\n      </BaseNode>\n    );\n  },\n};\n\nexport default AvgColumnNode;\n","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/single-cell-node.tsx",["125","126"],"import React, { useEffect, useState } from \"react\";\nimport { GraphNode, Table } from \"../../../types\";\nimport BaseNode from \"../../../base-node\";\nimport { BehaviorSubject } from \"rxjs\";\n\ninterface SingleCellNodeIO {\n  sources: {\n    value: BehaviorSubject<string | number>;\n  };\n  sinks: {\n    output: BehaviorSubject<string>;\n  };\n}\n\nconst SingleCellNode: GraphNode<SingleCellNodeIO> = {\n  initializeStreams: function ({ initialData }): SingleCellNodeIO {\n    const value = new BehaviorSubject(\"\");\n    return {\n      sources: {\n        value,\n      },\n      sinks: {\n        output: value,\n      },\n    };\n  },\n\n  Component: function ({ data }: { data: SingleCellNodeIO }) {\n    const [value, setValue] = useState<any>(\"Single Value\");\n    useEffect(() => {\n      const { unsubscribe } = data.sources.value.subscribe(setValue);\n      return unsubscribe;\n    }, []);\n    return (\n      <BaseNode sources={data.sources} sinks={data.sinks}>\n        <h2 style={{ backgroundColor: \"white\" }}>{JSON.stringify(value)}</h2>\n      </BaseNode>\n    );\n  },\n};\n\nexport default SingleCellNode;\n","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/primitives/index.tsx",[],"/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/column-generator-node/index.tsx",["127"],"import React from \"react\";\n\nimport { GraphNode, Table } from \"../../../../types\";\nimport ColumnGeneratorForm from \"./column-generator-form\";\nimport BaseNode from \"../../../../base-node\";\nimport { nanoid } from \"nanoid\";\nimport { combineLatest, BehaviorSubject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\ninterface ColumnGeneratorIO {\n  sources: {\n    table: BehaviorSubject<Table<any>>;\n    columnName: BehaviorSubject<string>;\n    columnFormula: BehaviorSubject<string>;\n  };\n  sinks: {\n    output: BehaviorSubject<Table<any>>;\n  };\n}\n\nexport default {\n  initializeStreams: function () {\n    const sources = {\n      table: new BehaviorSubject({ rows: [], columns: [] } as Table<any>),\n      columnName: new BehaviorSubject(nanoid()),\n      columnFormula: new BehaviorSubject(\"\"),\n    };\n    return {\n      sources,\n      sinks: {\n        output: combineLatest(\n          sources.table,\n          sources.columnName,\n          sources.columnFormula,\n        ).pipe(\n          map(([table, columnName, columnFormula]) => {\n            const newColumns = [\n              ...table.columns,\n              { Header: columnName, accessor: columnName },\n            ];\n            const newRows = table.rows.map((row) => ({\n              ...row,\n              [columnName]: applyExpr(row, columnFormula) || \"null\",\n            }));\n\n            return {\n              rows: newRows,\n              columns: newColumns,\n            };\n          }),\n        ) as BehaviorSubject<Table<any>>,\n      },\n    };\n  },\n  Component: function ({ data }) {\n    return (\n      <BaseNode sources={data.sources} sinks={data.sinks}>\n        <ColumnGeneratorForm\n          colName=\"asdfasdf\"\n          colFormula=\"\"\n          onChange={({ colName, colFormula }) => {\n            data.sources.columnName.next(colName);\n            data.sources.columnFormula.next(colFormula);\n          }}\n        />\n      </BaseNode>\n    );\n  },\n} as GraphNode<ColumnGeneratorIO>;\n\nfunction applyExpr(row, colExpr) {\n  const enrichedExpr = colExpr\n    .split(\" \")\n    .map((token) => {\n      if (![\"*\", \"-\", \"+\", \"/\"].includes(token)) {\n        return row[token];\n      }\n      return token;\n    })\n    .join(\" \");\n  try {\n    return eval(enrichedExpr);\n  } catch (e) {\n    return \"Err\";\n  }\n}\n","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/table-node/index.tsx",["128"],"import React, { useEffect, useState } from \"react\";\nimport BaseNode from \"../../../../base-node\";\nimport { GraphNode, Table } from \"../../../../types\";\nimport DataTable from \"./data-table\";\nimport { BehaviorSubject } from \"rxjs\";\n\ninterface TableNodeIO {\n  sources: {\n    table: BehaviorSubject<Table<any>>;\n  };\n  sinks: {\n    output: BehaviorSubject<Table<any>>;\n  };\n}\n\nconst TableNode: GraphNode<TableNodeIO> = {\n  initializeStreams: () => {\n    const tableStream = new BehaviorSubject({ rows: [], columns: [] });\n    return {\n      sources: {\n        table: tableStream\n      },\n      sinks: {\n        output: tableStream\n      }\n    };\n  },\n  Component: ({ data: { sources, sinks } }) => {\n    const [table, setTable] = useState({ rows: [], columns: [] });\n    useEffect(() => {\n      const { unsubscribe } = sinks.output.subscribe(setTable);\n      return unsubscribe;\n    }, [sources.table]);\n    return (\n      <BaseNode sources={sources} sinks={sinks}>\n        <DataTable data={table.rows} columns={table.columns} />\n      </BaseNode>\n    );\n  }\n};\n\nexport default TableNode;\n","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/filter-node/index.tsx",[],"/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/base-node.tsx",[],"/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/filter-node/filters.ts",["129"],"export default {\n  eq: (testVal, compareVal) => testVal === compareVal,\n  gt: (testVal, compareVal) => testVal > compareVal,\n  gte: (testVal, compareVal) => testVal >= compareVal,\n  lt: (testVal, compareVal) => testVal < compareVal,\n  lte: (testVal, compareVal) => testVal <= compareVal\n};\n","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/filter-node/filter-form.tsx",[],"/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/primitives/code.ts",["130"],"import { any, string } from \"superstruct\";\n\nexport const JS = {\n  label: \"Javascript\",\n  inputs: {\n    code: string(),\n    input: any(),\n  },\n  outputs: {\n    result({ code, input }: { code: string; input: any }) {\n      const func = new Function(\"input\", code);\n      return func(input);\n    },\n  },\n};\n","/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/primitives/date.ts",[],"/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/primitives/table.ts",[],"/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/table-node/data-table.tsx",[],"/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/standard/column-generator-node/column-generator-form.tsx",[],"/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/primitives/formula.ts",[],"/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/primitives/string.ts",[],"/Users/Matthew/Documents/computer_science/programming_projects/aspen/flow-sheets/src/graph-nodes/nodes/primitives/number.ts",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":3,"column":3,"nodeType":"137","messageId":"138","endLine":3,"endColumn":12},{"ruleId":"135","severity":1,"message":"139","line":27,"column":3,"nodeType":"137","messageId":"138","endLine":27,"endColumn":11},{"ruleId":"135","severity":1,"message":"140","line":160,"column":19,"nodeType":"137","messageId":"138","endLine":160,"endColumn":29},{"ruleId":"135","severity":1,"message":"141","line":218,"column":12,"nodeType":"137","messageId":"138","endLine":218,"endColumn":24},{"ruleId":"135","severity":1,"message":"142","line":218,"column":26,"nodeType":"137","messageId":"138","endLine":218,"endColumn":37},{"ruleId":"143","severity":1,"message":"144","line":1,"column":1,"nodeType":"145","endLine":22,"endColumn":3},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"146","severity":1,"message":"147","line":38,"column":8,"nodeType":"148","endLine":38,"endColumn":10,"suggestions":"149"},{"ruleId":"150","severity":1,"message":"151","line":42,"column":11,"nodeType":"152","endLine":49,"endColumn":13},{"ruleId":"135","severity":1,"message":"153","line":2,"column":21,"nodeType":"137","messageId":"138","endLine":2,"endColumn":26},{"ruleId":"146","severity":1,"message":"154","line":33,"column":8,"nodeType":"148","endLine":33,"endColumn":10,"suggestions":"155"},{"ruleId":"146","severity":1,"message":"156","line":50,"column":8,"nodeType":"148","endLine":50,"endColumn":10,"suggestions":"157"},{"ruleId":"135","severity":1,"message":"153","line":2,"column":21,"nodeType":"137","messageId":"138","endLine":2,"endColumn":26},{"ruleId":"146","severity":1,"message":"154","line":33,"column":8,"nodeType":"148","endLine":33,"endColumn":10,"suggestions":"158"},{"ruleId":"159","severity":1,"message":"160","line":82,"column":12,"nodeType":"161","messageId":"162","endLine":82,"endColumn":16},{"ruleId":"146","severity":1,"message":"163","line":33,"column":8,"nodeType":"148","endLine":33,"endColumn":23,"suggestions":"164"},{"ruleId":"143","severity":1,"message":"165","line":1,"column":1,"nodeType":"145","endLine":7,"endColumn":3},{"ruleId":"166","severity":1,"message":"167","line":11,"column":20,"nodeType":"168","messageId":"169","endLine":11,"endColumn":47},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Position' is defined but never used.","'setBgColor' is assigned a value but never used.","'sourceOutput' is assigned a value but never used.","'targetInput' is assigned a value but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sources.label'. Either include it or remove the dependency array.","ArrayExpression",["172"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Table' is defined but never used.","React Hook useEffect has a missing dependency: 'data.sources.value'. Either include it or remove the dependency array.",["173"],"React Hook useEffect has a missing dependency: 'data.sources.table'. Either include it or remove the dependency array.",["174"],["175"],"no-eval","eval can be harmful.","CallExpression","unexpected","React Hook useEffect has a missing dependency: 'sinks.output'. Either include it or remove the dependency array.",["176"],"Assign object to a variable before exporting as module default","no-new-func","The Function constructor is eval.","NewExpression","noFunctionConstructor","no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"179","fix":"183"},{"desc":"184","fix":"185"},"Update the dependencies array to be: [sources.label]",{"range":"186","text":"187"},"Update the dependencies array to be: [data.sources.value]",{"range":"188","text":"189"},"Update the dependencies array to be: [data.sources.table]",{"range":"190","text":"191"},{"range":"192","text":"189"},"Update the dependencies array to be: [sinks.output, sources.table]",{"range":"193","text":"194"},[1072,1074],"[sources.label]",[833,835],"[data.sources.value]",[1447,1449],"[data.sources.table]",[863,865],[882,897],"[sinks.output, sources.table]"]